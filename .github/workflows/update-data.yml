name: Daily Investment Calendar Update

on:
  schedule:
    # 每天北京时间 6:00 (UTC 10:00) 执行
    - cron: '0 2 * * *'
  workflow_dispatch: # 允许手动触发

permissions:
  contents: write

jobs:
  update-data:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'
    
    - name: Install dependencies
      run: |
        pip install -r scripts/requirements.txt
    
    - name: Ensure directory structure
      run: |
        mkdir -p data/web
        mkdir -p data/active/current
        mkdir -p data/active/previous
        echo "📁 当前目录结构："
        ls -la
        echo "📁 Data目录结构："
        ls -la data/ || echo "Data目录不存在"
        echo "📁 Archived目录结构："
        ls -la data/archived/ || echo "Archived目录不存在"
    
    - name: Check current data status
      id: check_data
      run: |
        echo "🔍 检查当前数据状态..."
        
        current_count=0
        for platform in cls jiuyangongshe tonghuashun investing eastmoney; do
          file_path="data/active/current/${platform}.txt"
          if [ -f "$file_path" ] && [ -s "$file_path" ]; then
            current_count=$((current_count + 1))
            echo "✅ 发现 ${platform}.txt ($(stat -c%s "$file_path") bytes)"
          else
            echo "❌ 缺少或为空: ${platform}.txt"
          fi
        done
        
        echo "📊 当前数据文件: $current_count/5"
        
        if [ $current_count -ge 3 ]; then
          echo "run_mode=daily" >> $GITHUB_OUTPUT
          echo "🔄 使用日常更新模式"
        else
          echo "run_mode=first-run" >> $GITHUB_OUTPUT
          echo "🚀 使用首次运行模式"
        fi
    
    - name: Run investment calendar
      run: |
        mode="${{ steps.check_data.outputs.run_mode }}"
        echo "🚀 执行模式: $mode"
        
        if [ "$mode" == "daily" ]; then
          python scripts/daily_calendar.py --daily
        else
          if [ ! -f "data/archived/historical_summary.txt" ]; then
            echo "📚 开始采集历史数据..."
            python scripts/historical_collector.py
          fi
          echo "🚀 开始首次运行..."
          python scripts/daily_calendar.py --first-run
        fi
        
        # 检查数据采集结果
        echo "📊 数据采集后的current目录:"
        ls -la data/active/current/ || echo "Current目录不存在"
        
        echo "📄 Current目录文件大小:"
        du -h data/active/current/*.txt 2>/dev/null || echo "无txt文件"
    - name: Create comprehensive data converter script
      run: |
        cat > /tmp/convert_data.py << 'SCRIPT_END'
        import json
        import os
        import glob
        from datetime import datetime

        def convert_platform_data(platform):
            source_file = 'data/active/current/' + platform + '.txt'
            target_file = 'data/web/' + platform + '.json'
            
            if not os.path.exists(source_file):
                print('⚠️ ' + platform + ' 源文件不存在')
                return False
            
            try:
                with open(source_file, 'r', encoding='utf-8') as f:
                    data = json.loads(f.read())
                
                platform_names = {
                    'cls': '财联社',
                    'jiuyangongshe': '韭研公社', 
                    'tonghuashun': '同花顺',
                    'investing': '英为财情',
                    'eastmoney': '东方财富'
                }
                
                web_data = {
                    'platform': platform,
                    'platform_name': platform_names.get(platform, platform),
                    'data_type': 'ACTIVE',
                    'total_events': data.get('total_events', 0),
                    'last_updated': data.get('last_updated', datetime.now().isoformat()),
                    'events': []
                }
                
                for event_data in data.get('events', []):
                    web_event = {
                        'id': event_data.get('event_id', ''),
                        'platform': event_data.get('platform', ''),
                        'title': event_data.get('title', ''),
                        'event_date': event_data.get('event_date', ''),
                        'event_time': event_data.get('event_time'),
                        'event_datetime': event_data.get('event_datetime'),
                        'content': event_data.get('content'),
                        'category': event_data.get('category'),
                        'importance': event_data.get('importance', 1),
                        'country': event_data.get('country'),
                        'city': event_data.get('city'),
                        'is_new': event_data.get('is_new', False),
                        'discovery_date': event_data.get('discovery_date'),
                        'data_status': event_data.get('data_status', 'ACTIVE'),
                        'stocks': event_data.get('stocks', []),
                        'themes': event_data.get('themes', []),
                        'concepts': event_data.get('concepts', [])
                    }
                    web_data['events'].append({k: v for k, v in web_event.items() if v is not None})
                
                with open(target_file, 'w', encoding='utf-8') as f:
                    json.dump(web_data, f, ensure_ascii=False, indent=2)
                
                print('✅ ' + platform + ' 转换完成: ' + str(len(web_data['events'])) + ' 个事件')
                return True
                
            except Exception as e:
                print('❌ ' + platform + ' 转换失败: ' + str(e))
                return False

        def main():
            print("🔄 开始数据转换...")
            
            platforms = ['cls', 'jiuyangongshe', 'tonghuashun', 'investing', 'eastmoney']
            current_converted = 0
            
            print("📊 转换当前数据...")
            for platform in platforms:
                if convert_platform_data(platform):
                    current_converted += 1
            
            print("📋 生成元数据...")
            metadata = {
                'last_updated': datetime.now().isoformat(),
                'total_events': 0,
                'platforms': {}
            }
            
            platform_names = {
                'cls': '财联社',
                'jiuyangongshe': '韭研公社', 
                'tonghuashun': '同花顺',
                'investing': '英为财情',
                'eastmoney': '东方财富'
            }
            
            for platform in platforms:
                json_file = 'data/web/' + platform + '.json'
                if os.path.exists(json_file):
                    try:
                        with open(json_file, 'r', encoding='utf-8') as f:
                            data = json.loads(f.read())
                            event_count = data.get('total_events', 0)
                            metadata['total_events'] += event_count
                            metadata['platforms'][platform] = {
                                'name': data.get('platform_name', platform),
                                'event_count': event_count
                            }
                    except Exception as e:
                        print('读取' + platform + '元数据失败: ' + str(e))
            
            with open('data/web/metadata.json', 'w', encoding='utf-8') as f:
                json.dump(metadata, f, ensure_ascii=False, indent=2)
            
            print('🎉 转换完成!')
            print('当前数据: ' + str(current_converted) + ' 个平台')
            print('总事件数: ' + str(metadata['total_events']))

        if __name__ == '__main__':
            main()
        SCRIPT_END
    
    - name: Convert data for web
      run: |
        echo "🔄 转换数据为Web格式..."
        mkdir -p data/web
        python3 /tmp/convert_data.py
        
        echo "📊 Web数据生成结果:"
        ls -la data/web/ || echo "Web目录不存在"
        
        # 清理临时文件
        rm -f /tmp/convert_data.py
        rm -f convert_data.py
    
    - name: Create previous directory structure
      run: |
        # 确保previous目录存在并有.gitkeep文件
        mkdir -p data/active/previous
        
        if [ ! -f "data/active/previous/.gitkeep" ]; then
          echo "# 保持previous目录结构" > data/active/previous/.gitkeep
          echo "📁 创建了previous目录的.gitkeep文件"
        fi
    
    - name: Configure Git
      run: |
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"
    
    - name: Commit and push changes
      run: |
        echo "📝 准备提交更改..."
        
        echo "📊 Current目录内容:"
        ls -la data/active/current/ || echo "Current目录不存在"
        
        echo "📊 Previous目录内容:"
        ls -la data/active/previous/ || echo "Previous目录不存在"
        
        # 添加current数据文件
        git add data/active/current/*.txt 2>/dev/null || echo "无current数据文件"
        
        # 添加previous目录结构
        git add data/active/previous/ || echo "无previous目录"
        
        # 添加web数据
        git add data/web/ || echo "无web数据"
        
        if [ -n "$(git status --porcelain)" ]; then
          echo "📊 发现以下变更:"
          git status --porcelain | head -20
          
          total_changes=$(git status --porcelain | wc -l)
          if [ $total_changes -gt 20 ]; then
            echo "... 还有 $((total_changes - 20)) 个变更文件"
          fi
          
          git commit -m "📊 Daily data update - $(date +'%Y-%m-%d %H:%M:%S')"
          git push
          echo "✅ 变更已提交并推送"
        else
          echo "ℹ️ 没有需要提交的变更"
        fi

    
    
    - name: Create metadata reader script
      run: |
        cat > read_metadata.py << 'EOF'
        import json
        import os

        def read_metadata():
            if os.path.exists('data/web/metadata.json'):
                try:
                    with open('data/web/metadata.json', 'r', encoding='utf-8') as f:
                        metadata = json.load(f)
                    print('  - 总事件数: ' + str(metadata.get('total_events', 0)))
                    print('  - 活跃平台: ' + str(len(metadata.get('platforms', {}))))
                    print('  - 历史文件: ' + str(metadata.get('historical_files', 0)))
                    print('  - 最后更新: ' + metadata.get('last_updated', '未知'))
                except Exception as e:
                    print('  - 无法读取元数据: ' + str(e))
            else:
                print('  - 元数据文件不存在')

        if __name__ == '__main__':
            read_metadata()
        EOF
    
    - name: Create historical index reader script
      run: |
        cat > read_historical.py << 'EOF'
        import json
        import os

        def read_historical_index():
            if os.path.exists('data/web/historical_index.json'):
                try:
                    with open('data/web/historical_index.json', 'r', encoding='utf-8') as f:
                        index = json.load(f)
                    periods = index.get('available_periods', [])
                    print('  - 可用时期: ' + str(len(periods)) + ' 个')
                    if periods:
                        print('  - 时间范围: ' + periods[0] + ' 至 ' + periods[-1])
                        recent = periods[-3:] if len(periods) >= 3 else periods
                        print('  - 最新时期: ' + str(recent))
                except Exception as e:
                    print('  - 无法读取历史索引: ' + str(e))
            else:
                print('  - 历史索引文件不存在')

        if __name__ == '__main__':
            read_historical_index()
        EOF
    
    - name: Deployment summary
      run: |
        echo "🎉 数据更新完成!"
        echo "📊 最终状态:"
        echo "  - 运行模式: ${{ steps.check_data.outputs.run_mode }}"
        
        current_count=$(ls data/active/current/*.txt 2>/dev/null | wc -l)
        web_count=$(ls data/web/*.json 2>/dev/null | wc -l)
        history_count=$(ls data/web/*_history_*.json 2>/dev/null | wc -l)
        
        echo "  - Current数据: $current_count 个文件"
        echo "  - Web数据: $web_count 个JSON文件"
        echo "  - 历史数据: $history_count 个历史文件"
        echo "  - 网站地址: https://${{ github.repository_owner }}.github.io/${{ github.event.repository.name }}/"
        
        echo "📈 数据统计:"
        python3 read_metadata.py
        
        echo "📅 历史数据索引:"
        python3 read_historical.py
        
        echo ""
        echo "🌐 访问网站查看数据更新结果！"
